using System.Globalization;
using FluentNHibernate.Mapping;

namespace NHibernateEClinic.ModelMapper.MapperUtils
{
    public static class Utils
    {
        /// <summary>
        /// From : http://nhforge.org/doc/nh/en/index.html#mapping-declaration-property 
        /// update, insert (optional - defaults to true) : specifies that the mapped columns should be included in  
        /// SQL UPDATE and/or INSERT statements. Setting both to false allows a pure "derived" property whose 
        /// value is initialized from some other property that maps to the same column(s) or by a trigger or other application.
        /// </summary>
        public static IProperty Insert(this IProperty source, bool value)
        {
            source.SetAttribute("insert", value.ToString(CultureInfo.InvariantCulture).ToLowerInvariant());
            return source;
        }

        /// <summary>
        /// From : http://www.hibernate.org/hib_docs/nhibernate/html_single/#mapping-declaration-manytoone
        /// update, insert (optional - defaults to true) : specifies that the mapped columns should be included in  
        /// SQL UPDATE and/or INSERT statements. Setting both to false allows a pure "derived" property whose 
        /// value is initialized from some other property that maps to the same column(s) or by a trigger or other application.
        /// </summary>
        public static ManyToOnePart<T> Insert<T>(this ManyToOnePart<T> source, bool value)
        {
            source.SetAttribute("insert", value.ToString(CultureInfo.InvariantCulture).ToLowerInvariant());
            return source;
        }

        /// <summary>
        /// From : http://nhforge.org/doc/nh/en/index.html#mapping-declaration-property 
        /// update, insert (optional - defaults to true) : specifies that the mapped columns should be included in  
        /// SQL UPDATE and/or INSERT statements. Setting both to false allows a pure "derived" property whose 
        /// value is initialized from some other property that maps to the same column(s) or by a trigger or other application.
        /// </summary>
        public static IProperty Update(this IProperty source, bool value)
        {
            source.SetAttribute("update", value.ToString(CultureInfo.InvariantCulture).ToLowerInvariant());
            return source;
        }

        /// <summary>
        /// From : http://www.hibernate.org/hib_docs/nhibernate/html_single/#mapping-declaration-manytoone
        /// update, insert (optional - defaults to true) : specifies that the mapped columns should be included in  
        /// SQL UPDATE and/or INSERT statements. Setting both to false allows a pure "derived" property whose 
        /// value is initialized from some other property that maps to the same column(s) or by a trigger or other application.
        /// </summary>
        public static ManyToOnePart<T> Update<T>(this ManyToOnePart<T> source, bool value)
        {
            source.SetAttribute("update", value.ToString(CultureInfo.InvariantCulture).ToLowerInvariant());
            return source;
        }

        /// <summary>
        /// From : http://nhforge.org/doc/nh/en/index.html#mapping-declaration-property
        /// generated (optional - defaults to never): Specifies that this property value is actually generated by the database.
        /// </summary>
        public static IProperty Generated(this IProperty source, Generated value)
        {
            source.SetAttribute("generated", value.ToString().ToLowerInvariant());
            return source;
        }
    }

    public enum Generated
    {
        Never,
        Insert,
        Always
    }
}
